/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale 1;

#include "../parms"

l #eval #{$L/$n#}; //  #5/3 5/4 5/5 5/6 5/7 //must be a whole period compared to the length of the channel.

    

fix #eval #{$a*sin((0+($l)/4)*degToRad(180)*(2/($l)))#};
fix2 #eval #{$b+$a*sin((($L+($l)/4)*degToRad(180)*(2/($l)))+degToRad($phi))#};


vertices
(
    //block1
    ($fix 0 0) 								//0
    ($fix2 0 0)  							//1
    ($fix $L 0) 				//2
    ($fix2 $L 0) 				//3
    ($fix 0 $s) 				//4
    ($fix2 0 $s) 				//5
    ($fix $L $s) 	//6
    ($fix2 $L $s) 	//7
    
);

blocks
(
    //block1
    hex (0 1 3 2 4 5 7 6) ($cell_x $cell_y $cell_z) simpleGrading (
        (
            (0.2 0.3 5)    // 20% y-dir, 30% cells, expansion = 4
            (0.6 0.4 1)    // 60% y-dir, 40% cells, expansion = 1
            (0.2 0.3 0.2) // 20% y-dir, 30% cells, expansion = 0.25 (1/4)
        )
        1                  // x-direction expansion ratio
        1                  // z-direction expansion ratio
    )  
);

edges
(
    spline 0 2
	#codeStream 
	{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(120);
		double length = $L;
		double amp = $a;
		double period = $l;
		double sz = points.size();
		double thisy = length/sz;
		double step = 0;
		
		for (label i = 0; i < sz; i++)
        {
			step = i*thisy;
			points[i] = point(amp*sin((step+(period)/4)*degToRad(180)*(2/(period))), step, 0);

        }

        os  << points;
    #};
	}

    
    spline 4 6
	#codeStream 
	{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(120);
		double length = $L;
		double amp = $a;
		double period = $l;
		double sz = points.size();
		double thisy = length/sz;
		double step = 0;
		
		for (label i = 0; i < sz; i++)
        {
			step = i*thisy;
			points[i] = point(amp*sin((step+(period)/4)*degToRad(180)*(2/(period))), step, $s);
			
        }

        os  << points;
    #};
	}
    
    spline 1 3
	#codeStream 
	{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(120);
		double length = $L;
		double width = $b;
		double phaseShift = $phi;
		double amp = $a;
		double period = $l;
		double sz = points.size();
		double thisy = length/sz;
		double step = 0;
		
		for (label i = 0; i < sz; i++)
        {
			step = i*thisy;
			points[i] = point((amp*sin(((step+(period)/4)*degToRad(180)*(2/(period)))+degToRad(phaseShift)))+width, step, 0);
			
        }
		
        os  << points;
    #};
	}

    spline 5 7
	#codeStream 
	{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(120);
		double length = $L;
		double width = $b;
		double phaseShift = $phi;
		double amp = $a;
		double period = $l;
		double sz = points.size();
		double thisy = length/sz;
		double step = 0;
		
		for (label i = 0; i < sz; i++)
        {
			step = i*thisy;
			points[i] = point((amp*sin(((step+(period)/4)*degToRad(180)*(2/(period)))+degToRad(phaseShift)))+width, step, $s);
			
        }

        os  << points;
    #};
	}
);

boundary
(
    bottom
    {
        type cyclic;
		neighbourPatch top;
        faces
        (
            (1 5 4 0)
        );
    }
	
    top
    {
        type cyclic;
		neighbourPatch bottom;
        faces
        (
            //Hvis block1
            (7 3 2 6)
        );
    }
	
    walls
    {
		type wall;
        faces
        (
	        (4 6 2 0)
            (5 1 3 7)
		);
	}

    
    frontAndBack
    {
        type empty;
        faces
        (
            (0 2 3 1)
            (4 5 7 6)

        );
    }
);

// mergePatchPairs
// (
// );

// ************************************************************************* //